<!DOCTYPE html>
<meta charset="utf-8">
<style type="text/css">
		select {
			font-size: 15px;
			font-family: ubuntu;
			border: 0;
			-webkit-appearance: none;
			-moz-appearance:none;
			background: #0088cc url(Images/arrow.png) no-repeat 90% center;
			width: 150px;
			text-indent: 0.01px;
			text-overflow: "";

			color: #FFF;
			border-radius: 15px;
			padding:5px;
			box-shadow: inset 0 0 5px rgba(000, 000, 000, 0.5)

		}
</style>
<body>
<script src="../d3/d3.min.js"></script>
<script>
	var countries = ["Israel", "Shanghai-China", "Mexico", "Sweden", "New_Zealand", "Tunisia"]
</script>
	<select onchange="select_type(value)" id="type">
		<option id="choose" value="0">Mother</option>
		<option id="choose" value="1">Father</option>
	</select>
	<select onchange="select_country(value)" id="country">
		<script>
			var select = document.getElementById('country')
			for(var i = 0; i <= countries.length - 1; ++i){
				var option = document.createElement("option")
				option.value = countries[i]
				option.innerHTML = countries[i]
				select.appendChild(option)
			}
			document.getElementById('country').options[1].selected = true
			
			function select_country(value){
				document.getElementById("selected_country")
				.innerHTML = value
				var type_select = document.getElementById('type')
				var type_choice = type.options[type_select.selectedIndex]
				display(type_choice.value, value)
			}
		</script>
	</select>

	<div>
		<h1><p id="selected_country">Shanghai-China</p></h1>
		<p></p>
	</div>
	<div id="canvas"></div>
<script>
var classes = ["Not Finished Primary", "Primary", "Junior Vocational", "Vocational", "General"]
var diameter = 860,
	format = d3.format(",d"),
	color = d3.scale.category10();
	color_legend = d3.scale.category10()

		var bubble = d3.layout.pack()
		.sort(null)
		.size([diameter, diameter])
		.padding(1.5);

		var svg = d3.select("div#canvas").append("svg")
		.attr("width", diameter)
		.attr("height", diameter)
		.attr("class", "bubble");

		svg.append("g")
		.selectAll("rect")
		.data(classes)
		.enter()
		.append("rect")
		.attr("x",0)
		.attr("y", function(d, i) {return i * 30})
		.attr("width", 20)
		.attr("height", 20)
		.attr("fill", function(d,i) {return color_legend(i)})

		svg.append("g")
		.attr("class", "Label")
		.selectAll("text")
		.data(classes)
		.enter()
		.append("text")
		.attr("font-size", "15")
		.attr("font-family", "Droid-serif")
		.attr("x", 25)
		.attr("y", function(d, i) {return 15 + i * 30})
		.text(function(d) {return d})

	function select_type(value){
		var select = document.getElementById('country')
		var select_country = select.options[select.selectedIndex].innerText
		display(value, select_country)
	}

	display(0, "Shanghai-China")
	function display(select, selected_country){
		var filename;
		switch(select){
		case "0": filename = "./data/" + selected_country + "/mother.json";break;
		case "1": filename = "./data/" + selected_country + "/father.json";break;
		default: filename = "./data/" + selected_country + "/mother.json";break;
		}
		d3.json(filename, function(error, root) {
					svg.selectAll(".node")
						.remove()
						var node = svg.selectAll(".node")
						.data(bubble.nodes(classes(root))
								.filter(function(d) { return !d.children; }))
						.enter().append("g")
						.attr("class", "node")
						.attr("transform", function(d) { return "translate(" + d.x + "," + d.y + ")"; });

						node.append("title")
						.text(function(d) { return d.className + ": " + format(d.value); });

						node.append("circle")
						.attr("r", function(d) { return d.r; })
						.style("fill", function(d) { return color(d.packageName); });

						node.append("text")
						.attr("dy", ".3em")
						.style("text-anchor", "middle")
						.text(function(d) { return d.className.substring(0, d.r / 3); });

						});

// Returns a flattened hierarchy containing all leaf nodes under the root.
function classes(root) {
		var classes = [];
		

		function recurse(name, node) {
				if (node.children) node.children.forEach(function(child) { recurse(node.name, child); });
				else classes.push({packageName: name, className: node.name, value: node.size});
		}

		recurse(null, root);
		return {children: classes};
}

}
</script>
